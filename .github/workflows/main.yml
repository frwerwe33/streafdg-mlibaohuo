name: strea-Keepalive
on:
  schedule:
    - cron: '0 * * * *'  # Run every hour
  workflow_dispatch:
    inputs:
      website_url:
        description: '±»јмІйНшХѕµДURL'
        required: true
        type: string
      status_code:
        description: 'ґУНшХѕ»сИЎµДЧґМ¬Вл'
        required: true
        type: string
      timestamp:
        description: 'јмІй·ўЙъК±µДК±јдґБ'
        required: true
        type: string

# Add permissions for the GITHUB_TOKEN
permissions:
  contents: write

jobs:
  keepalive:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Restore pip cache
      id: cache-pip
      uses: actions/cache/restore@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Restore Playwright cache
      id: cache-playwright
      uses: actions/cache/restore@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/playwright.version') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
          
    - name: Create playwright.version file if not exists
      run: |
        if [ ! -f "playwright.version" ]; then
          playwright_version=$(pip show playwright 2>/dev/null | grep Version | cut -d ' ' -f 2 || echo "1.34.0")
          echo "$playwright_version" > playwright.version
        fi
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Always install playwright explicitly to ensure it's available
        pip install playwright
        
        # Install from requirements.txt if it exists
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Verify playwright is installed correctly
        python -c "import playwright; print('Playwright successfully imported')"
        
        # Only install Playwright browsers if cache doesn't exist
        if [ "${{ steps.cache-playwright.outputs.cache-hit }}" != 'true' ]; then
          echo "Installing Playwright browsers..."
          python -m playwright install firefox
        else
          echo "Using cached Playwright browsers"
        fi

    - name: Record start time
      run: |
        echo "START_TIME=$(date +%s)" >> $GITHUB_ENV
        echo "开始时间: $(date '+%Y-%m-%d %H:%M:%S UTC')"
      
    - name: Run Python Script
      env:
        ST_URL: ${{ secrets.ST_URL }}
        PYTHONPATH: $PYTHONPATH:$(pwd)
      run: |
        # Print Python environment info for debugging
        which python
        python -V
        echo "PYTHONPATH: $PYTHONPATH"
        
        # Verify modules are accessible
        python -m pip list | grep playwright
        
        # Run the script with explicit Python path
        python -m main

    - name: Record execution time and commit
      run: |
        # Calculate execution time
        END_TIME=$(date +%s)
        EXECUTION_TIME=$((END_TIME - START_TIME))
        
        # Format execution time
        MINUTES=$((EXECUTION_TIME / 60))
        SECONDS=$((EXECUTION_TIME % 60))
        
        # Create time record with timestamp
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
        echo "运行时间记录: $TIMESTAMP" >> time.txt
        echo "执行时长: ${MINUTES}分${SECONDS}秒 (总共${EXECUTION_TIME}秒)" >> time.txt
        echo "---" >> time.txt
        
        # Display the recorded information
        echo "脚本执行完成"
        echo "执行时长: ${MINUTES}分${SECONDS}秒"
        echo "记录已保存到 time.txt"
        
        # Configure git with token authentication
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Set up token authentication
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        
        # Add and commit the time.txt file
        git add time.txt
        if git diff --staged --quiet; then
          echo "没有变化需要提交"
        else
          git commit -m "记录运行时间: $TIMESTAMP (执行时长: ${MINUTES}分${SECONDS}秒)"
          git push origin HEAD:${{ github.ref }}
        fi
        
       
    - name: Save pip cache
      uses: actions/cache/save@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Save Playwright cache
      uses: actions/cache/save@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/playwright.version') }}
